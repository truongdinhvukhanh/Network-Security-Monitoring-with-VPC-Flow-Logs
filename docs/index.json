[
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/5-create-and-configure-opensearch-service/1-create-opensearch-service-domain/",
	"title": "Create OpenSearch Service Domain",
	"tags": [],
	"description": "",
	"content": "\rIn this step, you will create your Amazon OpenSearch Service domain. This domain will act as the centralized log analytics and search platform for the VPC Flow Logs data collected in this lab. You will configure its instance type, storage, and critically, integrate it within your NSM-VPC\u0026rsquo;s private subnet, ensuring secure access only from within your defined network, thereby enhancing data isolation and security.\nSign in to the AWS Management Console In the search bar, type Amazon OpenSearch Service Select Amazon OpenSearch Service from the services list Click Create domain to begin Domain Configuration Domain name: Enter nsm-opensearch Domain creation method: Select Standard create Templates: Select Dev/test (for lab environment) Deployment option(s): Select Domain without standby (sufficient for lab purposes) Availability Zone(s): Select 1-AZ Version: Select the latest OpenSearch version available (e.g., OpenSearch 2.19) Number of data nodes Instance family: Select General purpose from the dropdown Instance type: Select t3.small.search (sufficient for lab purposes) Number of data nodes: Set to 1 (for lab environment) Storage type: Select EBS Volume type: General Purpose (SSD) - gp3 Storage size per node: 10 GiB Network Configuration Network: Select VPC access IP address type: Select IPv4 only VPC: Select your NSM-VPC from the dropdown Subnets: Select NSM-Private-Subnet Security groups: Select SG-OpenSearch Fine-grained access control Uncheck Enable fine-grained access control Access policy: Select Configure domain level access policy Action: Select Allow Review and Create Review all settings to ensure they match your requirements Click Create to initiate domain creation Wait for the domain status to change to Active (this may take 15-20 minutes) Copy OpenSearch Dashboards URL (without https:// and /_dashboards) "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/1-create-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "\rCreating an Amazon Virtual Private Cloud (VPC) is the foundational step for this lab. It provides a logically isolated virtual network that you define, acting as the secure and private environment where all your project\u0026rsquo;s AWS resources (such as subnets, instances, and services) will reside. This isolation ensures that your resources are contained within your control and not exposed to the public internet unless explicitly configured.\nStep-by-Step VPC Creation Navigate to the AWS Management Console In the search bar, find and select VPC ![image.png]({{ site.baseurl }}/static/images/2/2.1/image.png) Initiate VPC creation: Select Your VPCs from the left navigation panel Click on Create VPC button in the top-right corner Configure your VPC settings: Under Resources to create, select VPC only Enter Name tag: NSM-VPC Set IPv4 CIDR block: 10.0.0.0/16 Complete the VPC creation: Review your settings Click Create VPC Verify successful VPC creation: You should see a success message Your new VPC will appear in the VPC list "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview of the Lab: Network Security Monitoring with VPC Flow Logs This lab guides you through building a comprehensive network monitoring solution on AWS using VPC Flow Logs, Kinesis Data Firehose, Amazon OpenSearch Service, and Amazon S3. You will learn to capture, ingest, store, analyze, and visualize network traffic data from your Virtual Private Cloud (VPC). This architecture provides deep insights into network security, operational health, and enables proactive troubleshooting and threat detection.\nArchitecture Diagram The diagram above illustrates the architecture we will implement:\nUser Access (1): An administrator connects securely to the Bastion Host. Bastion Host (2): A secure EC2 instance in the public subnet acts as a jump server to access resources in the private subnet. VPC Flow Logs (3): Network traffic metadata from the VPC is captured and sent to Kinesis Data Firehose. Amazon Kinesis Data Firehose (4): A fully managed service that collects and delivers VPC Flow Logs to both Amazon OpenSearch Service and Amazon S3. Amazon OpenSearch Service (5): Processes and indexes the flow log data for real-time analysis and visualization via OpenSearch Dashboards. Amazon S3 (6): Provides durable and cost-effective storage for raw VPC Flow Logs, serving as a backup and a data source for Amazon Athena. Amazon Athena (7): An interactive query service that allows you to analyze flow log data directly from S3 using standard SQL. Lab Breakdown: What You Will Do? This workshop is structured into several key parts, each focusing on a specific component of the solution:\nPart 2: Preparation: You will set up the fundamental AWS network infrastructure, including creating a Virtual Private Cloud (VPC), defining public and private subnets, establishing an Internet Gateway, configuring route tables, and creating essential security groups. You will also create necessary IAM policies and roles to grant appropriate permissions to AWS services.\nPart 3: Create EC2 Bastion: You will launch and configure an EC2 instance to serve as a Bastion Host. This host will provide secure SSH access to your private network, enabling you to manage resources within your private subnets.\nPart 4: Create S3 Bucket: You will create an Amazon S3 bucket. This bucket will act as the durable storage destination for your raw VPC Flow Logs, ensuring data retention and providing a source for further analysis.\nPart 5: Create and configure OpenSearch Service: You will deploy an Amazon OpenSearch Service domain. This managed service will be configured to ingest, store, and allow for real-time analysis of your flow log data, along with setting up an ingest pipeline for data parsing.\nPart 6: Create Kinesis Data Firehose: You will set up an Amazon Kinesis Data Firehose delivery stream. This stream will be configured to automatically capture VPC Flow Logs and deliver them to both your OpenSearch Service domain and your S3 bucket.\nPart 7: Create VPC Flow Log: You will enable and configure VPC Flow Logs for your NSM-VPC. This step ensures that all network traffic within your VPC is captured and routed to the Kinesis Data Firehose stream for processing.\nPart 8: Verify data flow and create Dashboard: You will verify that the entire data pipeline is functioning correctly by checking data ingestion into OpenSearch and then create insightful dashboards in OpenSearch Dashboards to visualize and analyze your VPC Flow Logs.\nPart 9: Query logs with Athena: You will learn how to use Amazon Athena to query the raw VPC Flow Logs stored in your S3 bucket, performing ad-hoc analysis using standard SQL.\nPart 10: Clean up resources: Finally, you will follow steps to systematically remove all the AWS resources provisioned during this workshop to avoid any ongoing charges.\nContents: Part 2: Preparation Part 3: Create EC2 Bastion Part 4: Create S3 Bucket Part 5: Create and configure OpenSearch Service Part 6: Create Kinesis Data Firehose Part 7: Create VPC Flow Log Part 8: Verify data flow and create Dashboard Part 9: Query logs with Athena Part 10: Clean up resources "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/3-create-ec2-bastion/1-launch-an-ec2-instance-as-a-bastion-host/",
	"title": "Launch an EC2 Instance as a Bastion Host",
	"tags": [],
	"description": "",
	"content": "\rIn this step, you will launch an EC2 instance that will serve as your Bastion Host. This host is essential for securely accessing other EC2 instances and resources located in private subnets within your VPC, which do not have direct internet access. Setting up a Bastion Host centralizes access points, enhances security by reducing the attack surface, and provides a controlled entry point for administrative tasks in your private network.\nSign in to the AWS Management Console In the search bar, type EC2 Select EC2 from the services list In the EC2 dashboard: Click on Instances in the navigation pane Click Launch instances Name and Tags Name: Enter NSM-Bastion-Host Select the Amazon Machine Image (AMI): Under Quick Start, select Amazon Linux Choose Amazon Linux 2023 from the available options Choose instance specifications: Choose t2.micro Create a Key Pair Click Create new key pair Key pair name: NSM-Key Key pair type: Select RSA Private key file format: Select .pem Click Create key pair Important: This file will be downloaded only once. Store it safely Configure Network Settings Click Edit in the Network settings section VPC: Select your NSM-VPC Subnet: Select your NSM-Public-Subnet Auto-assign public IP: Enable Firewall (security groups): Select existing security group Choose SG-Bastion from the dropdown Review and Launch Review your settings Click Launch instance Wait for Instance to Initialize Click View all instances Wait until the Instance state shows \u0026ldquo;Running\u0026rdquo; and Status checks shows \u0026ldquo;2/2 checks passed\u0026rdquo; Note the Public IPv4 address of your instance "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/",
	"title": "Network Security Monitoring with VPC Flow Logs",
	"tags": [],
	"description": "",
	"content": "Network Security Monitoring with VPC Flow Logs Overview In this workshop, you will learn how to build a comprehensive network security monitoring solution on Amazon Web Services (AWS). You will implement an end-to-end pipeline to capture, ingest, store, analyze, and visualize VPC Flow Logs, enhancing visibility and security for your cloud infrastructure. This solution will provide you with practical experience in leveraging key AWS services for robust network observability.\nWorkshop Modules Introduction Preparation Steps Create EC2 Bastion Create S3 Bucket Create and configure OpenSearch Service Create Kinesis Data Firehose Create VPC Flow Log Verify data flow and create Dashboard Query logs with Athena Clean up resources Please ensure you complete the \u0026ldquo;Resource Cleanup\u0026rdquo; module after finishing the workshop to avoid incurring any unexpected charges on your AWS account. AWS resources continue to accrue costs until they are properly terminated or deleted.\n"
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/8-verify-data-flow-and-create-dashboard/1-verify-data-flow/",
	"title": "Verify data flow",
	"tags": [],
	"description": "",
	"content": "\rIn this step, you will verify that VPC Flow Logs are being successfully collected and delivered to Amazon OpenSearch Service via Kinesis Data Firehose. Checking this data flow is essential to ensure that your entire network monitoring pipeline is operating as expected, providing real-time network data for subsequent analysis and visualization.\nVerify Data Ingestion in OpenSearch Dashboards Generate Network Traffic for Testing Before verifying the data flow, ensure you have some network traffic to analyze:\nSSH into your Bastion Host using your key pair From the Bastion Host, try connecting to other resources in your VPC Run some basic network commands like ping, curl, or wget Wait about 5 - 10 minutes Verify Kinesis Data Firehose Delivery\nNavigate to the Amazon Kinesis console Select your NSM-FlowLogs-Firehose stream Click on the Monitoring tab Look for: Incoming records (should be greater than 0) Incoming bytes (should be greater than 0) S3 delivery success (should match incoming records) OpenSearch delivery success (should match incoming records) Check for Errors\nLook for any error logs: Destination error logs Backup error logs If you see errors, check the CloudWatch logs for your Firehose stream Verify S3 Bucket Delivery\nNavigate to the AWS S3 Console Click on your S3 bucket name Navigate through the prefix structure you configured (e.g., flow-logs/year=2025/month=07/day=22/hour=17/) You should see files with timestamps corresponding to when your flow logs were generated Verify OpenSearch Service Delivery\nReturn to: https://localhost:9200/_dashboards/ In Dev Tools Run the following command to list all indices: GET _cat/indices?v Look for indices that match your configured index pattern (e.g., vpc-flow-logs) Verify that the index has documents (the docs.count column should be greater than 0) "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/3-create-ec2-bastion/2-connect-to-the-bastion-host-via-ssh/",
	"title": "Connect to the Bastion Host via SSH",
	"tags": [],
	"description": "",
	"content": "\rThis step outlines how to securely connect to your NSM-Bastion host using SSH. Establishing an SSH connection to the Bastion Host is crucial because it acts as a secure jump server, allowing you to then access other resources in your private subnets (which are not directly accessible from the internet). This ensures that your internal infrastructure remains isolated and protected, with all access points carefully controlled through the Bastion Host.\nOpen Command Prompt with Administrator privileges Remove all current access permissions to the file: icacls \u0026#34;\u0026lt;your-path-to-keypairfile\u0026gt;\u0026#34; /inheritance:r icacls \u0026#34;\u0026lt;your-path-to-keypairfile\u0026gt;\u0026#34; /remove:g *S-1-1-0 Replace \u0026lt;your-path-to-keypairfile\u0026gt; with the actual path to your NSM-Key.pem file /inheritance:r: Disables inheritance of permissions from the parent folder /remove:g *S-1-1-0: Removes permissions for the \u0026ldquo;Everyone\u0026rdquo; group Grant Read \u0026amp; Execute permissions to the current user: icacls \u0026#34;\u0026lt;your-path-to-keypairfile\u0026gt;\u0026#34; /grant:r \u0026lt;YourName\u0026gt;:(RX) Replace \u0026lt;YourName\u0026gt; with your actual Windows username (RX): Stands for Read \u0026amp; Execute If you are unsure of your username, you can run the whoami command to find it. For example, if the result is users/aws, replace \u0026lt;YourName\u0026gt; with aws Check assigned permissions: icacls \u0026#34;\u0026lt;your-path-to-keypairfile\u0026gt;\u0026#34; Connect to the Bastion Host via SSH: ssh -i \u0026#34;\u0026lt;your-path-to-keypairfile\u0026gt;\u0026#34; ec2-user@\u0026lt;Public-IP\u0026gt; Replace \u0026lt;your-path-to-keypairfile\u0026gt; with the path to your NSM-Key.pem file. Replace \u0026lt;Public-IP\u0026gt; with the Public IP address of your EC2 instance.\nFirst-time connection prompt: The first time you connect, you will be asked \u0026ldquo;Are you sure you want to continue connecting (yes/no/[fingerprint])?\u0026rdquo;. Type yes You have successfully completed the Bastion EC2 creation and verification. "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/8-verify-data-flow-and-create-dashboard/2-create-dashboard/",
	"title": "Create Dashboard",
	"tags": [],
	"description": "",
	"content": "\rIn this step, you will create a dashboard in OpenSearch Dashboards to visualize your VPC Flow Logs data. Building a dashboard helps you easily monitor and analyze network traffic patterns, identify anomalies, and gain deeper insights into your VPC\u0026rsquo;s network activity through intuitive charts and statistics.\nCreate Visualizations and Dashboard Create a New Index Pattern In the left sidebar, click on Dashboards Management Click on Index patterns Click Create index pattern Index pattern name: Enter vpc-flow-logs* Click Next step Time field: Select start Click Create index pattern Create a Pie Chart for Traffic by Source IP In the left sidebar, click on Visualize Click Create visualization Select Pie as the visualization type Select your index pattern Under Buckets, click Add → Split slices Aggregation: Select Terms Field: Select srcaddr (source IP address) Size: 10 Click Update to see the visualization Click Save and name it Top Source IPs Create a Bar Chart for Traffic by Destination Port Return to Visualizations List Click Create visualization Select Vertical bar as the visualization type Select your index pattern Under Buckets, click Add → X-axis Aggregation: Select Terms Field: Select dstport (destination port) Size: 10 (top 10 destination ports) Click Update to see the visualization Click Save and name it Top Destination Ports Create a Line Chart for Traffic Over Time Return to Visualizations List Click Create visualization Select Line as the visualization type Select your index pattern Under Buckets, click Add → X-axis Aggregation: Select Date Histogram Field: Select start Interval: Select Auto Click Update to see the visualization Click Save and name it Traffic Over Time Create a New Dashboard In the left sidebar, click on Dashboard Click Create new dashboard Click Add in the top right Select all the visualizations you created: Top Source IPs Top Destination Ports Traffic Over Time Arrange the visualizations by dragging and resizing them Click Save in the top right Name it VPC Flow Logs Dashboard "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/2-create-subnets/",
	"title": "Create Subnets",
	"tags": [],
	"description": "",
	"content": "\rIn this lab, creating public and private subnets within your VPC is essential for segmenting your network. The public subnet will host resources like the Bastion Host that require internet access, while the private subnet will securely house internal resources like your OpenSearch domain, ensuring they are not directly exposed to the internet. This setup enhances security and organizes your network for the planned architecture.\nCreate Public Subnet Access the subnet creation interface: Navigate to the VPC console Select Subnets from the left navigation panel Click Create subnet Select your VPC: In the Create subnet interface, select the NSM-VPC from the dropdown Configure your public subnet: Subnet name: Enter NSM-Public-Subnet Availability Zone: Select us-east-1a IPv4 CIDR block: Enter 10.0.1.0/24 Click Create subnet Verify successful subnet creation: You should see a success message Your new subnet will appear in the subnet list Enable automatic public IP assignment for public subnet Select NSM-Public-Subnet from the subnet list Click Actions \u0026gt; Edit subnet settings Configure auto-assign IP settings: Under Auto-assign IP settings, check Enable auto-assign public IPv4 address Click Save Create Private Subnet Click Create subnet Enter the following details: VPC ID: Select NSM-VPC from the dropdown Subnet name: Enter NSM-Private-Subnet Availability Zone: Select us-east-1a IPv4 CIDR block: Enter 10.0.2.0/24 Click Create subnet "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/5-create-and-configure-opensearch-service/2-create-ingest-pipeline/",
	"title": "Create the Ingest Pipeline",
	"tags": [],
	"description": "",
	"content": "\rThis step is crucial for preparing your OpenSearch domain to properly ingest and analyze VPC Flow Log data. You will first verify access to OpenSearch Dashboards via an SSH tunnel through your Bastion Host. Following this, you will create and test an ingest pipeline (vpc-flow-log-pipeline). This pipeline uses a Grok processor to parse the raw, unstructured VPC Flow Log messages into distinct, searchable fields, making the data highly valuable for security analysis and network monitoring within OpenSearch.\nVerify Access to OpenSearch Dashboards Now that your OpenSearch domain is active, you\u0026rsquo;ll need to verify that you can access OpenSearch Dashboards.\nSet Up SSH Tunnel to Access OpenSearch Dashboards\nOpen a terminal or command prompt on your local machine Create an SSH tunnel through your Bastion Host ssh -i \u0026#34;your-key.pem\u0026#34; -L 9200:your-opensearch-endpoint:443 ec2-user@your-bastion-host-ip Replace your-key.pem with the path to your key file Replace your-opensearch-endpoint with your OpenSearch domain endpoint (without https:// and /_dashboards) that you copied in previous step Replace your-bastion-host-ip with your Bastion Host\u0026rsquo;s public IP Keep this terminal window open while you perform the following steps Access OpenSearch Dashboards\nOpen your web browser, enter the URL: https://localhost:9200/_dashboards/ Verify Your Admin Access\nExplore the OpenSearch Dashboards Interface After logging in, you should see the OpenSearch Dashboards home page Take a moment to familiarize yourself with the interface Check Cluster Health In the left navigation menu, click on Dev Tools In the Console, run the following command: GET _cluster/health The response should show the health status of your cluster (ideally \u0026ldquo;green\u0026rdquo;) Create the Ingest Pipeline Execute this command in the Dev Tools console to create your parsing pipeline:\nPUT _ingest/pipeline/vpc-flow-log-pipeline { \u0026#34;description\u0026#34;: \u0026#34;Pipeline to parse VPC Flow Log data\u0026#34;, \u0026#34;processors\u0026#34;: [ { \u0026#34;grok\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;message\u0026#34;, \u0026#34;patterns\u0026#34;: [ \u0026#34;%{NUMBER:version:int} %{NUMBER:account_id} (%{NOTSPACE:interface_id}|-) (%{IP:srcaddr}|-) (%{IP:dstaddr}|-) (%{NUMBER:srcport:int}|-) (%{NUMBER:dstport:int}|-) (%{NUMBER:protocol:int}|-) (%{NUMBER:packets:int}|-) (%{NUMBER:bytes:long}|-) (%{NUMBER:start:long}|-) (%{NUMBER:end:long}|-) (%{WORD:action}|-) (%{WORD:log_status}|-)\u0026#34; ] } }, { \u0026#34;script\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Convert dash values to null\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;\u0026#34;\u0026#34; def fields = [\u0026#39;interface_id\u0026#39;, \u0026#39;srcaddr\u0026#39;, \u0026#39;dstaddr\u0026#39;, \u0026#39;srcport\u0026#39;, \u0026#39;dstport\u0026#39;, \u0026#39;protocol\u0026#39;, \u0026#39;packets\u0026#39;, \u0026#39;bytes\u0026#39;, \u0026#39;start\u0026#39;, \u0026#39;end\u0026#39;, \u0026#39;action\u0026#39;, \u0026#39;log_status\u0026#39;]; for (def field : fields) { if (ctx.containsKey(field) \u0026amp;\u0026amp; ctx[field] == \u0026#39;-\u0026#39;) { ctx[field] = null; } } \u0026#34;\u0026#34;\u0026#34; } }, { \u0026#34;remove\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;message\u0026#34; } } ] } This pipeline:\nUses a Grok processor to parse the space-delimited VPC Flow Log format Extracts 14 individual fields with appropriate data types Removes the original message field after parsing Test the Pipeline Before applying it to your data, test the pipeline with your sample data:\nPOST _ingest/pipeline/vpc-flow-log-pipeline/_simulate { \u0026#34;docs\u0026#34;: [ { \u0026#34;_source\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;2 509069525939 eni-06dbfc5864eff22c5 10.0.2.79 10.0.2.216 443 56618 6 4 4734 1753442090 1753442117 ACCEPT OK\u0026#34; } } ] } The response should show your data parsed into individual fields: Apply Pipeline to New Data For new incoming data, create an index template that automatically applies the pipeline:\nPUT _index_template/vpc-flow-logs-template { \u0026#34;index_patterns\u0026#34;: [\u0026#34;vpc-flow-logs-*\u0026#34;], \u0026#34;template\u0026#34;: { \u0026#34;settings\u0026#34;: { \u0026#34;default_pipeline\u0026#34;: \u0026#34;vpc-flow-log-pipeline\u0026#34; }, \u0026#34;mappings\u0026#34;: { \u0026#34;properties\u0026#34;: { \u0026#34;version\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; }, \u0026#34;account_id\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; }, \u0026#34;interface_id\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; }, \u0026#34;srcaddr\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;ip\u0026#34; }, \u0026#34;dstaddr\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;ip\u0026#34; }, \u0026#34;srcport\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;dstport\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;protocol\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;packets\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;bytes\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;long\u0026#34; }, \u0026#34;start\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;epoch_second\u0026#34; }, \u0026#34;end\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;epoch_second\u0026#34; }, \u0026#34;action\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; }, \u0026#34;log_status\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; } } } } } Keep this window open while you perform the following steps "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Overview of Preparation Steps In this section, we will establish the foundational AWS infrastructure required for our workshop. This includes setting up a Virtual Private Cloud (VPC) with its subnets, configuring internet connectivity using an Internet Gateway and Route Tables, defining network security with Security Groups, and creating necessary IAM policies and roles for service permissions. These steps are crucial for building a secure, scalable, and functional environment for your AWS resources.\nKey Concepts: Virtual Private Cloud (VPC): A logically isolated virtual network within AWS where you can launch AWS resources. Subnets: Segments of a VPC\u0026rsquo;s IP address range where you can place groups of isolated resources, categorized as public (internet-accessible) or private (internal only). Internet Gateway (IGW): A VPC component that enables communication between your VPC and the internet. Route Table: A set of rules that determine where network traffic from your subnet or gateway is directed. Security Groups: Virtual firewalls for your Amazon EC2 instances that control inbound and outbound traffic based on rules. IAM Policy: A document that defines permissions, specifying who can access which AWS resources and under what conditions. IAM Role: An AWS identity with permission policies that determine what the identity can and cannot do in AWS. Roles are assumed by trusted entities. Contents: 2.1 Create VPC 2.2 Create Subnets 2.3 Create Internet Gateway 2.4 Create Route Table 2.5 Create Security Groups 2.6 Create IAM Policy and IAM Role "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/3-create-ec2-bastion/",
	"title": "Create EC2 Bastion",
	"tags": [],
	"description": "",
	"content": "Overview of EC2 Bastion Host Setup In this section, we will set up and connect to an EC2 Bastion Host. A Bastion Host acts as a secure intermediary server that provides controlled access to your private network resources from an external network (like the internet). This is a critical component for securely managing instances located in private subnets, ensuring that direct SSH access to internal servers is minimized, thereby enhancing your overall cloud security posture.\nKey Concepts: EC2 Instance: A virtual server in the Amazon Elastic Compute Cloud (EC2) for running applications. Bastion Host: A server that acts as a secure gateway to a private network, allowing controlled access to internal resources. Key Pair: A set of security credentials (public and private keys) used to prove your identity when connecting to EC2 instances. SSH (Secure Shell): A cryptographic network protocol for secure data communication, remote command-line login, and other secure network services. Table of Contents: 3.1 Launch an EC2 Instance as a Bastion Host 3.2 Connect to the Bastion Host via SSH "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/3-create-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "\rAn Internet Gateway (IGW) is crucial for this lab as it enables the public subnet within your NSM-VPC to communicate with the internet. This is a prerequisite for resources like the Bastion Host in the public subnet to be accessible for management and for any public services to function as intended.\nStep-by-Step Internet Gateway Creation Access the Internet Gateway interface: Navigate to the VPC console Select Internet Gateways from the left navigation panel Click Create internet gateway Configure your Internet Gateway: Enter Name tag: NSM-IGW Click Create internet gateway Verify successful Internet Gateway creation: You should see a success message Your new Internet Gateway will appear in the list Attach the Internet Gateway to your VPC: Select your newly created Internet Gateway Click Actions dropdown Select Attach to VPC Choose the NSM-VPC from the dropdown Click Attach internet gateway Confirm successful attachment: The State of your Internet Gateway should change to Attached This indicates the Internet Gateway is now operational with your VPC "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/4-create-route-table/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "\rIn this lab, configuring a Route Table is vital for directing traffic to and from your subnets. Specifically, we will create a route table that routes all internet-bound traffic from your NSM-Public-Subnet through the NSM-IGW you just created. This ensures that resources in the public subnet can send and receive data from the internet, which is necessary for their intended functionality.\nStep-by-Step Route Table Creation Access the Route Table interface: Navigate to the VPC console Select Route Tables from the left navigation panel Click Create route table Configure your Route Table: Enter Name: NSM-Public-RT Select VPC: Choose the NSM-VPC from the dropdown Click Create route table Verify successful Route Table creation: You should see a success message Your new Route Table will appear in the list Modify the routes in your Route Table: Select your newly created Route Table Click Actions dropdown Select Edit routes Add an Internet route: Click Add route For Destination, enter 0.0.0.0/0 (represents all IPv4 traffic) For Target, select Internet Gateway and choose NSM-IGW Click Save changes Associate the Route Table with your public subnet: Select the Subnet associations tab Click Edit subnet associations Select the appropriate subnets: Select the NSM-Public-Subnet you created earlier Click Save associations Confirm your subnet associations: Review the associated subnets in the Subnet associations tab The public subnet is now configured to route internet traffic through the Internet Gateway "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/4-create-s3-bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "\rIn this section, you will create an Amazon S3 (Simple Storage Service) bucket. This S3 bucket is a crucial component of our project\u0026rsquo;s architecture as it will serve as the primary storage destination for the data processed by Kinesis Firehose. S3 provides highly durable, scalable, and secure object storage, making it an ideal choice for reliably storing raw or processed data before further analysis or long-term archiving.\nCreate the S3 Bucket Sign in to the AWS Management Console In the search bar, type S3 Select S3 from the services list In the S3 interface, select Create bucket In the Create bucket interface Bucket type: Select General purpose Bucket name: Type nsm-flow-logs-YYYYMMDD (replace YYYYMMDD with today\u0026rsquo;s date to ensure uniqueness) Click Create bucket\nCreate Folder Structure for Organized Data Storage Select your newly created bucket Scroll down and click Create folder\nCreate the following folders: flow-logs (for VPC Flow Logs data) athena-results (for storing Athena query results) Verify two foders was created successfully Configure Bucket Policy for Firehose Access Go to the Permissions tab Scroll down to Bucket policy and click Edit Copy and paste the following policy, replacing the placeholders: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowFirehoseDelivery\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;firehose.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:GetBucketLocation\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:PutObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::nsm-flow-logs-YYYYMMDD\u0026#34;, \u0026#34;arn:aws:s3:::nsm-flow-logs-YYYYMMDD/*\u0026#34; ], \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;aws:SourceAccount\u0026#34;: \u0026#34;YOUR-ACCOUNT-ID\u0026#34; }, \u0026#34;ArnLike\u0026#34;: { \u0026#34;aws:SourceArn\u0026#34;: \u0026#34;arn:aws:firehose:us-east-1:YOUR-ACCOUNT-ID:deliverystream/*\u0026#34; } } }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowAthenaAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;athena.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetBucketLocation\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:ListMultipartUploadParts\u0026#34;, \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:PutObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::nsm-flow-logs-YYYYMMDD\u0026#34;, \u0026#34;arn:aws:s3:::nsm-flow-logs-YYYYMMDD/*\u0026#34; ] } ] } Replace: nsm-flow-logs-YYYYMMDD with your actual bucket name (4 places) YOUR-ACCOUNT-ID with your AWS account ID (found in the top-right corner of the AWS console) Ensure the region matches your setup (us-east-1 in this example) Click Save changes "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/5-create-and-configure-opensearch-service/",
	"title": "Create and configure OpenSearch Service",
	"tags": [],
	"description": "",
	"content": "Overview of OpenSearch Service Setup In this section, we will deploy and configure an Amazon OpenSearch Service domain. OpenSearch Service is a managed service that makes it easy to deploy, operate, and scale OpenSearch clusters in the AWS Cloud. For this workshop, OpenSearch will serve as the analytics engine and full-text search platform for your VPC Flow Logs, enabling you to store, search, and visualize network traffic data. You will configure the domain for private access within your VPC and set up an ingest pipeline to parse the incoming flow log data.\nKey Concepts: Amazon OpenSearch Service: A managed service for deploying, operating, and scaling OpenSearch clusters. OpenSearch Domain: Your OpenSearch cluster, including data nodes, storage, and networking configurations. Ingest Pipeline: A series of processors that transform documents before they are indexed in OpenSearch. Grok Processor: A powerful tool within ingest pipelines used to parse unstructured log data into structured fields. Index Template: A way to automatically apply settings and mappings to new indices based on matching patterns. Table of Contents: 5.1 Create OpenSearch Service Domain 5.2 Create Ingest Pipeline "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/5-create-security-groups/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "\rSecurity Groups are fundamental to defining the network access control for the various components in this lab. By creating SG-Bastion, SG-Firehos, and SG-OpenSearch, we establish granular control over what traffic is allowed to reach your instances and services. This ensures that only authorized access (e.g., SSH to Bastion, Firehose to OpenSearch) is permitted, thereby enhancing the overall security posture of your deployed solution.\nBastion Security Group Access the Security Group interface: Navigate to the VPC console Select Security Groups from the left navigation panel Click Create security group Configure the Bastion Security Group: Security group name: Enter SG-Bastion Description: Enter Security group for Bastion Host access VPC: Select the NSM-VPC from the dropdown Define inbound rules: Click Add rule Configure SSH access: Type: Select SSH Source: Select My IP (automatically uses your current public IPv4 address) Review outbound rules: By default, all outbound traffic is allowed Click Create security group Verify successful creation: You should see a success message Your new security group will appear in the list Firehose Security Group Initiate another security group creation: Navigate back to Security Groups Click Create security group Configure the Firehose Security Group: Security group name: Enter SG-Firehose Description: Enter Security group for Firehose VPC: Select the NSM-VPC from the dropdown Complete the security group creation: Review your settings Click Create security group Verify successful creation: You should see a success message Your new security group will appear in the list OpenSearch Security Group Initiate another security group creation: Navigate back to Security Groups Click Create security group Configure the OpenSearch Security Group: Security group name: Enter SG-OpenSearch Description: Enter Security group for OpenSearch domain access VPC: Select the NSM-VPC from the dropdown Define inbound rules: Click Add rule Configure HTTPs access for Bastion: Type: Select SSH Source: Select Custom Select the security group ID of SG-Bastion you just created Click Add rule again Configure HTTPs access for Firehose: Type: Select SSH Source: Select Custom Select the security group ID of SG-Firehose you just created Complete the security group creation: Review your settings Click Create security group Verify three security groups: Confirm three security groups appear in your list You now have dedicated security groups for Bastion, Firehose and OpenSearch resources "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/2-preparation/6-create-iam-policy-and-iam-role/",
	"title": "Create IAM Policy and IAM Role",
	"tags": [],
	"description": "",
	"content": "\rIn this lab, creating a dedicated IAM Policy (NSM-Firehose-Policy) and an IAM Role (NSM-Firehose-Role) is critical for securely enabling the Kinesis Firehose service to interact with other AWS resources like S3 and OpenSearch. This ensures that Firehose has only the necessary permissions to deliver data to its intended destinations without over-privileging, adhering to the principle of least privilege, which is essential for a secure architecture.\nCreate IAM Firehose Policy Navigate to the IAM Console: Navigate to the AWS Management Console Search for and select IAM in the services search bar Initiate policy creation: Navigate to Policies in the left navigation pane Click Create policy Specify permissions: Select the JSON tab Paste the following JSON into the JSON tab { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:GetBucketLocation\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:PutObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::*\u0026#34;, \u0026#34;arn:aws:s3:::*/*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;es:DescribeDomain\u0026#34;, \u0026#34;es:DescribeDomains\u0026#34;, \u0026#34;es:DescribeDomainConfig\u0026#34;, \u0026#34;es:ESHttpPost\u0026#34;, \u0026#34;es:ESHttpPut\u0026#34;, \u0026#34;es:ESHttpGet\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:es:*:*:domain/*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeVpcs\u0026#34;, \u0026#34;ec2:DescribeVpcAttribute\u0026#34;, \u0026#34;ec2:DescribeSubnets\u0026#34;, \u0026#34;ec2:DescribeSecurityGroups\u0026#34;, \u0026#34;ec2:DescribeNetworkInterfaces\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:CreateNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:DeleteNetworkInterface\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:logs:*:*:log-group:/aws/kinesisfirehose/*:*\u0026#34; ] } ] } Click Next: Configure policy details: Policy name: Enter NSM-Firehose-Policy Review and create Click Create policy Verify successful creation: You should see a success message Your new security group will be added in the list Create IAM Firehose Roles Create a new role: In the left navigation pane, select Roles Click Create role Select the trusted entity: Trusted entity type: Choose AWS service Use case: Search for and select Firehose Click Next Add permissions: Search for and select your custom Policy: NSM-Firehose-Policy Click Next Configure role details: Role name: Enter NSM-Firehose-Role Description: Enter Allows Firehose to deliver data to OpenSearch and S3 Review the trust policy and permissions Review and create: Verify all configurations are correct Click Create role Confirm role creation: You should see a success message The role is now ready for use "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/6-create-kinesis-data-firehose/",
	"title": "Create Kinesis Data Firehose",
	"tags": [],
	"description": "",
	"content": "\rIn this section, you will create and configure an Amazon Kinesis Data Firehose delivery stream. This Firehose stream is a critical component that will automatically capture, transform, and load your VPC Flow Logs data from a direct PUT source into your Amazon OpenSearch Service domain and also back up the data to your S3 bucket. Firehose simplifies the process of reliably streaming data to various destinations, ensuring your network telemetry is efficiently collected and made available for analysis.\nCreating a Kinesis Data Firehose Delivery Stream Sign in to the AWS Management Console In the search bar, type Firehose Select Amazon Data Firehose from the services list Create Firehose stream Select Firehose streams from the left navigation pane Click Create Firehose stream Choose source and destination Source: Select Direct PUT Destination: Select Amazon OpenSearch Service Firehose stream name: Enter NSM-FlowLogs-Firehose Configure Destination Settings OpenSearch Service domain: Click Browse Select nsm-opensearch and click Choose Index: Enter vpc-flow-logs Index rotation: Select Every day Destination VPC connectivity VPC: NSM-VPC Subnets: NSM-Private-Subnet Security groups: Select SG-Firehose Backup settings Source record backup in Amazon S3: Select All data S3 backup bucket: Click Browse Choose your S3 Bucket (nsm-flow-logs-YYYYMMDD) and click Choose S3 prefix flow-logs/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/ S3 error output prefix: errors/ Advanced Settings Service access Select Choose existing IAM role Select NSM-Firehose-Role from the dropdown Create Click Create delivery stream at the bottom of the page Wait for the delivery stream status to change to Active "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/7-create-vpc-flow-log/",
	"title": "Create VPC Flow Log",
	"tags": [],
	"description": "",
	"content": "\rIn this section, you will configure VPC Flow Logs to capture detailed information about the IP traffic going to and from network interfaces in your Virtual Private Cloud (VPC). This is a crucial step for network monitoring, security analysis, and troubleshooting within your AWS environment. The VPC Flow Logs will be configured to send all traffic data directly to the Kinesis Data Firehose stream you previously set up, ensuring real-time ingestion into your OpenSearch Service domain for immediate analysis and visualization.\nCreating a VPC Flow Log for Network Monitoring Navigate to the AWS Management Console In the search bar, find and select VPC Create flow log Select your NSM-VPC Choose the Flow logs tab Click Create flow log Configure the flow log: Filter: All (captures all traffic) Maximum aggregation interval: 1 minute Destination: Send to Amazon Data Firehose in the same account Firehose delivery stream: Select NSM-FlowLogs-Firehose from the dropdown Log format: AWS default format Click Create flow log "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/8-verify-data-flow-and-create-dashboard/",
	"title": "Verify data flow and create Dashboard",
	"tags": [],
	"description": "",
	"content": "Overview of Data Flow Verification and Dashboard Creation In this section, we will verify the VPC Flow Logs data flow from its source to Amazon OpenSearch Service and create a dashboard to visualize this data. This is the final step to ensure your entire network monitoring architecture is functioning correctly, allowing you to easily search, analyze, and monitor network traffic within your VPC through custom charts and metrics.\nKey Concepts: Amazon OpenSearch Service: A managed service for deploying, operating, and scaling OpenSearch clusters. OpenSearch Dashboards: A web-based user interface for OpenSearch to visualize and manage data. Index Pattern: A pattern used in OpenSearch Dashboards to identify the indices you want to explore and visualize. Discover: An OpenSearch Dashboards feature that allows you to search, filter, and explore raw data. Visualization: Charts and graphs created from data in OpenSearch to present information visually. Dashboard: A collection of visualizations arranged on a single page to provide an overview of the data. Table of Contents: 8.1 Verify data flow 8.2 Create Dashboard "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/9-query-logs-with-athena/",
	"title": "Query logs with Athena",
	"tags": [],
	"description": "",
	"content": "\rIn this section, you will utilize Amazon Athena to query the VPC Flow Logs stored in your S3 bucket. Athena is an interactive query service that makes it easy to analyze data directly in Amazon S3 using standard SQL. This step demonstrates how to efficiently perform ad-hoc analysis on your raw flow log data, providing an alternative or complementary method to OpenSearch for deep dive investigations and custom reporting on your network traffic.\nQuerying VPC Flow Logs with Amazon Athena Configure Athena Query Results Location\nNavigate to Athena Console\nFirst-time setup: If this is your first time, click \u0026ldquo;Explore the query editor\u0026rdquo;\nClick Settings tab at the top\nClick Manage Enter S3 location: s3://nsm-flow-logs-YYYYMMDD/athena-results/\n(replace nsm-flow-logs-YYYYMMDD with your actual bucket name)\nClick Save Create Database\nIn the Athena Query Editor, run this command: CREATE DATABASE IF NOT EXISTS vpc_flow_logs_db; Create VPC Flow Logs Table\nRun this command CREATE EXTERNAL TABLE vpc_flow_logs_db.vpc_flow_logs ( version int, account_id string, interface_id string, srcaddr string, dstaddr string, srcport int, dstport int, protocol int, packets bigint, bytes bigint, windowstart bigint, windowend bigint, action string, flowlogstatus string ) ROW FORMAT DELIMITED FIELDS TERMINATED BY \u0026#39; \u0026#39; LOCATION \u0026#39;s3://nsm-flow-logs-20250727/flow-logs/\u0026#39; TBLPROPERTIES ( \u0026#39;skip.header.line.count\u0026#39;=\u0026#39;0\u0026#39; ); Verify Table Creation\nSHOW TABLES; Test with Sample Queries\nBasic Data Exploration -- View first 10 records to understand your data structure SELECT * FROM vpc_flow_logs LIMIT 10; Count Total Records -- Count total flow log records SELECT COUNT(*) as total_records FROM vpc_flow_logs; Data Quality Check -- Check for different actions in your logs SELECT action, COUNT(*) as count FROM vpc_flow_logs GROUP BY action; Example Queries for Analysis\nSSH Traffic Analysis (Port 22) -- Find SSH connection attempts SELECT srcaddr, dstaddr, action, packets, bytes, from_unixtime(windowstart) as start_time, from_unixtime(windowend) as end_time FROM vpc_flow_logs WHERE dstport = 22 ORDER BY windowstart DESC LIMIT 20; Rejected Connections Analysis -- Analyze rejected connections SELECT srcaddr, dstaddr, dstport, COUNT(*) as rejected_count FROM vpc_flow_logs WHERE action = \u0026#39;REJECT\u0026#39; GROUP BY srcaddr, dstaddr, dstport ORDER BY rejected_count DESC LIMIT 15; View Query Results in S3\nNavigate to https://s3.console.aws.amazon.com/ Navigate to bucket: nsm-flow-logs-YYYY-MM-DD Open folder: athena-results/ "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/10-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "\rIn this final section, you will learn how to properly clean up all the AWS resources provisioned throughout this lab. It is crucial to delete these resources to avoid incurring unnecessary costs and to maintain a tidy AWS account. This step-by-step guide ensures that you systematically remove all components of the network monitoring solution, from Firehose streams and EC2 instances to OpenSearch domains, VPCs, S3 buckets, and IAM roles/policies.\nDelete Firehose Stream Navigate to https://us-east-1.console.aws.amazon.com/firehose Select NSM-FlowLogs-Firehose stream Click Delete Type NSM-FlowLogs-Firehose and click Delete Delete Bastion Hose Navigate to https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Instances Select NSM-Bastion-Host Click Instance state → Terminate (delete) instance Click Terminate (delete) Delete OpenSearch Domain Navigate to https://us-east-1.console.aws.amazon.com/aos/home?region=us-east-1#opensearch/dashboard Select nsm-opensearch Click Delete Type nsm-opensearch and click Delete Waiting for opensearch domain to delete successfully Delete VPC Navigate to https://us-east-1.console.aws.amazon.com/vpcconsole/home?region=us-east-1#vpcs: Select NSM-VPC Click Actions → Delete VPC Type delete and click Delete Delete Elastic IP Select Elastic IP from the left navigation panel Select Elastic IP Click Actions → Release Elastic IP addresses → Release Delete S3 Bucket Navigate to https://us-east-1.console.aws.amazon.com/s3 Select your bucket (nsm-flow-logs-YYYYMMDD) → Click Empty Type permanently delete → Empty Click Exit Select your bucket again (nsm-flow-logs-YYYYMMDD) → Click Delete Type your bucket name → Click Delete bucket Delete IAM Role and IAM Policy Navigate to https://us-east-1.console.aws.amazon.com/iam Select Role from the left navigation panel Select NSM-Firehose-Role Click Delete Type NSM-Firehose-Role → Click Delete Select Policies from the left navigation panel Search for and select NSM-Firehose-Policy Click Delete Type NSM-Firehose-Policy → Click Delete "
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://truongdinhvukhanh.github.io/Network-Security-Monitoring-with-VPC-Flow-Logs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]